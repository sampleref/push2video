//Author: chakra
//Google Protobuf types for push2talk
syntax = "proto3";
option java_package = "com.push2talk.rpc.events";
option java_multiple_files = true;

import "google/protobuf/empty.proto";

service PushToTalk {
    rpc signallingStarted (SignallingStart) returns (google.protobuf.Empty) {
    };
    rpc sendPeerMessage (PeerMessageRequest) returns (PeerMessageResponse) {
    };
    rpc createAudioChannel (CreateAudioChannelRequest) returns (CreateAudioChannelResponse) {
    };
    rpc checkPing (PingRequest) returns (PingResponse) {
    };
}

message SignallingStart {
    string hostnamePort = 1;
}

message PingRequest {
    string message = 1;
}

message PingResponse {
    string message = 1;
}

message PeerMessageResponse {
    string peerId = 1;
    string channelId = 2;
    string message = 3;
    Status status = 4;
    enum Status {
        OK = 0;
        ERROR = 1;
        INVALIDPEER = 2;
    }
}

message PeerStatusMessage {
    Status status = 1;
    enum Status {
        CONNECTED = 0;
        DISCONNECTED = 1;
        AUDIO_RESET = 2;
        VIDEO_RESET = 3;
    }
}

message ChannelStatusMessage {
    Status status = 1;
    enum Status {
        VIDEO_LOCKED = 0;
        VIDEO_UNLOCKED = 1;
    }
}

message SdpMessage {
    string sdp = 1;
    string type = 2; // type: offer/answer
    Direction direction = 3;
    enum Direction {
        SENDER = 0;
        RECEIVER = 1;
    }
    Endpoint endpoint = 4;
    enum Endpoint {
        SERVER = 0;
        CLIENT = 1;
    }
    MediaType mediaType = 5;
    enum MediaType {
        AUDIO = 0;
        VIDEO = 1;
    }
}

message IceMessage {
    string ice = 1;
    string mLineIndex = 2;
    Direction direction = 3;
    enum Direction {
        SENDER = 0;
        RECEIVER = 1;
    }
    Endpoint endpoint = 4;
    enum Endpoint {
        SERVER = 0;
        CLIENT = 1;
    }
    MediaType mediaType = 5;
    enum MediaType {
        AUDIO = 0;
        VIDEO = 1;
    }
}

message PeerMessageRequest {
    string peerId = 1;
    string channelId = 2;
    oneof message {
        PeerStatusMessage peerStatusMessage = 3;
        SdpMessage sdpMessage = 4;
        IceMessage iceMessage = 5;
        ChannelStatusMessage channelStatusMessage = 6;
    }
    repeated string peersInChannel = 7;
}

message CreateAudioChannelRequest {
    string channelId = 1;
}

message CreateAudioChannelResponse {
    string channelId = 1;
    Status status = 2;
    enum Status {
        OK = 0;
        ERROR = 1;
    }
}